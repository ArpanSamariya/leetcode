/**
 * Definition of Interval:
 * classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    static bool comp( Interval a,  Interval b){
        return a.start < b.start;
    }
    struct CompareHeight {
    bool operator()(Interval const& p1, Interval const& p2)
    {
        // return "true" if "p1" is ordered
        // before "p2", for example:
        return p1.end > p2.end;
    }
    };
    /**
     * @param intervals: an array of meeting time intervals
     * @return: the minimum number of conference rooms required
     */
    int minMeetingRooms(vector<Interval> &intervals) {
        // Write your code here

        sort(intervals.begin(), intervals.end(), comp);
        // for(auto i : intervals){cout<<i.start<<" "<<i.end<<endl;}
        priority_queue<Interval, vector<Interval>, CompareHeight> pq;
        pq.push(intervals[0]);

        for(int i = 1 ; i < intervals.size(); i++){
            Interval curr = pq.top();
            pq.pop();
            // cout<<"curr end"<<curr.end<<endl;
            if(intervals[i].start < curr.end){
                pq.push(Interval(intervals[i].start,intervals[i].end));
                pq.push(Interval(curr.start,curr.end));
            } else {
                pq.push(Interval(intervals[i].start,intervals[i].end));
            } 
        }
        return pq.size();

    }
};
